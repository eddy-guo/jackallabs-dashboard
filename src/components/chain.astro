---
export interface Chain {
  title: string;
  api: string;
  address: string;
  image: string;
}
const { title, api, address, image } = Astro.props;

// Redis - cache for api data

// import Redis from "ioredis";
// import fs from "fs";
import Redis from "ioredis";
import fs from "fs";

const redis = new Redis({
  host: "redis-14719.c274.us-east-1-3.ec2.cloud.redislabs.com",
  port: 14719,
  password: `${import.meta.env.REDIS_PASSWORD}`,
});

const test_array = {
  Title: "Akash",
  "Blocks Produced": "17",
};

redis.set("foo", "bar", (err, reply) => {
  if (err) throw err;
  console.log(reply);
});

redis.set("test", JSON.stringify(test_array), (err, reply) => {
  if (err) throw err;
  console.log(reply);
});

redis.get("foo", (err, reply) => {
  if (err) throw err;
  console.log(reply);
});

redis.get("test", (err, reply) => {
  if (err) throw err;
  console.log(reply);
});

const key_list = await redis.keys("*")

for (let i = 0; i < key_list.length; i++) {
  if (key_list[i] == null) { // would never happen
    console.log("Key does not exist.")
  } else {
    console.log(key_list[i] + ": " + (await redis.get(key_list[i])))
  }
}

// Chain object
const validatorChain: Chain = {
  title: `${title}`,
  api: `${api}`,
  address: `${address}`,
  image: `${image}`,
};

// get functions (might need to add err catch in functions)
export async function getCurrentBlock(chain: Chain) {
  const response = await fetch(`${chain.api}/blocks/latest`);
  const data = await response.json();
  return data["block"]["header"]["height"];
}

export async function getValidators(chain: Chain) {
  const response = await fetch(`${chain.api}/validatorsets/latest`);
  const data = await response.json();
  return data;
}

async function getMoreValidators(chain: Chain) {
  const response = await fetch(`${chain.api}/validatorsets/latest?page=2`);
  const data = await response.json();
  return data;
}

// Validator Info
const validatorHeight = await getCurrentBlock(validatorChain);
const validators = await getValidators(validatorChain);
var maxValidators = validators["result"]["total"];
var jackalRank;

// check if there is a page 2, then iterate accordingly
if (
  validators["result"]["total"] == validators["result"]["validators"].length
) {
  for (let i = 0; i < maxValidators; i++) {
    if (
      validators["result"]["validators"][i]["address"] == validatorChain.address
    ) {
      jackalRank = i + 1;
    }
  }
} else {
  const moreValidators = await getMoreValidators(validatorChain);
  for (let i = 0; i < moreValidators["result"]["validators"].length; i++) {
    if (
      moreValidators["result"]["validators"][i]["address"] ==
      validatorChain.address
    ) {
      jackalRank = validators["result"]["validators"].length + i + 1;
    }
  }
}
---

<div class="chain">
  <img src={`/images/${image}.png`} alt={`${image} icon`} />
  <div class="chain-text">
    <h4><a href={"https://ping.pub/" + image} target="_blank">{title}</a></h4>
    <h2 class="rank">Rank {jackalRank}</h2>
    <span
      ><span class="bold">{maxValidators}</span> Total Validators, <span
        class="bold">{Number(validatorHeight).toLocaleString()}</span
      > Blocks Produced</span
    >
  </div>
</div>

<style>
  img {
    height: 100px;
    width: 100px;
  }
  .chain {
    padding: 40px 40px;
    display: flex;
    flex-grow: 1;
    text-align: left;
    align-items: center;
    border-top: 1px solid #d3d3d3;
    border-right: 1px solid #d3d3d3;
    border-bottom: 1px solid #d3d3d3;
  }
  .chain-text {
    padding: 0px 40px;
  }
  .chain-text > h4 {
    font-size: 16px;
  }
  .chain-text > h4 > a,
  .chain-text > h4 > a:visited {
    font-weight: 600;
    text-decoration: none;
    color: black;
    text-decoration-line: underline;
    text-decoration-style: dashed;
    text-underline-offset: 0.15em;
    text-decoration-thickness: 0.05em;
  }
  .chain-text > h4 > a:hover {
    color: rgb(160, 160, 160);
  }
  .chain-text > h2 {
    font-size: 30px;
    margin: 20px 0px;
  }
  .chain-text > p {
    margin-bottom: 5px;
  }
  .bold {
    font-weight: bold;
  }
</style>
