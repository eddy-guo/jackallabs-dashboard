---
export interface Chain {
    title: string,
    api: string,
    address: string,
    height: any,
}
const { title, api, address } = Astro.props;

// Chain objects
const secretChain: Chain = {
    title: `${title}`,
    api: `${api}`,
    address: `${address}`,
    height: 0,
}

// get functions
async function getCurrentBlock(chain: Chain) {
  const latestBlocks = await fetch(`${chain.api}/blocks/latest`).then((res) => res.json());
  return parseInt(latestBlocks["block"]["header"]["height"]);
}

async function getValidators(chain: Chain) {
  const validators = await fetch(`${chain.api}/validatorsets/${chain.height-30}`).then((res) => res.json()); // -30 to avoid block error
  return validators;
}

async function getMoreValidators(chain: Chain) {
    const validators = await fetch(`${chain.api}/validatorsets/${chain.height-30}?page=2`).then((res) => res.json());
    return validators;
}

// Secret Info
const secretHeight = await getCurrentBlock(secretChain);
secretChain.height = secretHeight; // update chain height on api call
const secretValidators = await getValidators(secretChain);
var secretJackalRank;

// check if there is a page 2...
var secretMaxValidators;
if (secretValidators["result"]["total"] == secretValidators["result"]["validators"].length) {
    secretMaxValidators = secretValidators["result"]["total"];
    for (let i = 0; i < secretMaxValidators; i++) {
        if (secretValidators["result"]["validators"][i]["address"] == secretChain.address) {
            secretJackalRank = i + 1;
        }
    }
} else {
    const moreValidators = await getMoreValidators(secretChain)
    secretMaxValidators = secretValidators["result"]["validators"].length + moreValidators["result"]["validators"].length
    for (let i = 0; i < moreValidators["result"]["validators"].length; i++) {
        if (moreValidators["result"]["validators"][i]["address"] == secretChain.address) {
            secretJackalRank = secretValidators["result"]["validators"].length + i + 1;
        }
    }
}
---
<div class="secret">
    <b>{title}</b>
    <div class="block-height">Current Block Height: {secretHeight}</div>
    <div class="max-validators">
        Number of Validators: {secretMaxValidators}
    </div>
    <div class="rank">Rank: {secretJackalRank}</div>
</div>

<style>
</style>