---
export interface Chain {
  title: string;
  api: string;
  address: string;
  image: string;
}
const { title, api, address, image } = Astro.props;

// Redis setup
import Redis from "ioredis";

export const redis = new Redis({
  host: "redis-14719.c274.us-east-1-3.ec2.cloud.redislabs.com",
  port: 14719,
  password: `${import.meta.env.REDIS_PASSWORD}`,
});

// Chain object
const validatorChain: Chain = {
  title: `${title}`,
  api: `${api}`,
  address: `${address}`,
  image: `${image}`,
};

// get functions (might need to add err catch in functions)
export async function getCurrentBlock(chain: Chain) {
  const response = await fetch(`${chain.api}/cosmos/base/tendermint/v1beta1/blocks/latest`);
  const data = await response.json();
  return data["block"]["header"]["height"];
}

async function getValidators(chain: Chain) {
  const response = await fetch(`${chain.api}/cosmos/base/tendermint/v1beta1/validatorsets/latest`);
  const data = await response.json();
  return data;
}

async function getMaxValidators(chain: Chain) {
  const response = await fetch(`${chain.api}/cosmos/base/tendermint/v1beta1/validatorsets/latest`);
  const data = await response.json();
  return data["pagination"]["total"];
}

async function getMoreValidators(chain: Chain) {
  const response = await fetch(`${chain.api}/cosmos/base/tendermint/v1beta1/validatorsets/latest?pagination.offset=150`);
  const data = await response.json();
  return data;
}

// Redis logic

// get or set function
export function getOrSetCache(key: any, callback: any) {
  return new Promise((resolve, reject) => {
    redis.get(key, async (err, reply) => {
      if (err) return reject(err);
      if (reply != null) return resolve(JSON.parse(reply));
      const newData = await callback;
      redis.setex(key, 30, JSON.stringify(newData));
      resolve(newData);
    })
  })
}
// Max Validators and Validator Height
const maxValidators = await getOrSetCache(`${title}MaxValidators`, getMaxValidators(validatorChain));
const validatorHeight = await getCurrentBlock(validatorChain);

// Jackal Rank - custom
function getJackalRank() {
  return new Promise((resolve, reject) => {
    redis.get(`${title}JackalRank`, async (err, reply) => {
      if (err) return reject(err);
      if (reply != null) {
        // console.log("CACHE HIT");
        return resolve(JSON.parse(reply));
      }
      // console.log("CACHE MISS");
      const validators = await getValidators(validatorChain);
      const maxValidators = await getMaxValidators(validatorChain);
      const moreValidators = await getMoreValidators(validatorChain);
      function checkPageTwo() {
        var jackalRank;
        if (validators["pagination"]["total"] == validators["validators"].length) {
          for (let i = 0; i < maxValidators; i++) {
            if (validators["validators"][i]["address"] == validatorChain.address) {
              jackalRank = i + 1;
            }
          }
        } else {
          for (let i = 0; i < moreValidators["validators"].length; i++) {
            if (moreValidators["validators"][i]["address"] == validatorChain.address) {
              jackalRank = validators["validators"].length + i + 1;
            }
          }
        }
        return jackalRank;
      }
      const newData = checkPageTwo();
      redis.setex(`${title}JackalRank`, 30, JSON.stringify(newData));
      resolve(newData);
    });
  });
}
const jackalRank = await getJackalRank();
---

<div class="chain">
  <img src={`/images/${image}.png`} alt={`${image} icon`} />
  <div class="chain-text">
    <h4><a href={"https://ping.pub/" + image} target="_blank">{title}</a></h4>
    <h2 class="rank">Rank {jackalRank}</h2>
    <span
      ><span class="bold">{maxValidators}</span> Total Validators, <span
        class="bold">{Number(validatorHeight).toLocaleString()}</span
      > Blocks Produced</span
    >
  </div>
</div>

<style>
  img {
    height: 100px;
    width: 100px;
  }
  .chain {
    padding: 40px 40px;
    display: flex;
    flex-grow: 1;
    text-align: left;
    align-items: center;
    border-top: 1px solid #d3d3d3;
    border-right: 1px solid #d3d3d3;
    border-bottom: 1px solid #d3d3d3;
  }
  .chain-text {
    padding: 0px 40px;
  }
  .chain-text > h4 {
    font-size: 16px;
  }
  .chain-text > h4 > a,
  .chain-text > h4 > a:visited {
    font-weight: 600;
    text-decoration: none;
    color: black;
    text-decoration-line: underline;
    text-decoration-style: dashed;
    text-underline-offset: 0.15em;
    text-decoration-thickness: 0.05em;
  }
  .chain-text > h4 > a:hover {
    color: rgb(160, 160, 160);
  }
  .chain-text > h2 {
    font-size: 30px;
    margin: 20px 0px;
  }
  .chain-text > p {
    margin-bottom: 5px;
  }
  .bold {
    font-weight: bold;
  }
</style>
