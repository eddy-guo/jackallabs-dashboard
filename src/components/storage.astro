---
import {
  getOrSetCache,
} from "../components/chain.astro";

const storagedata = await fetch(
  "https://testnet-api.jackalprotocol.com/jackal-dao/canine-chain/storage/providers"
).then((res) => res.json());

// function to get address freespace
async function getFreeSpace(address: any) {
  const response = await fetch(`https://testnet-api.jackalprotocol.com/jackal-dao/canine-chain/storage/freespace/${address}`);
  const data = await response.json();
  return data["space"];
}

const storageInfo : any = await getOrSetCache("storageProviders", storagedata["providers"]);
const totalProviders = storagedata["pagination"]["total"];
// add freespace to new array
for (let i = 0; i < storageInfo.length; i++) {
    storageInfo[i]["freespace"] = await getFreeSpace(storageInfo[i]["address"])
}
// sort storageInfo["totalspace"] by decreasing order
storageInfo.sort((a: any, b: any) => parseFloat(b.totalspace) - parseFloat(a.totalspace));
---
<div class="storage-providers">
    <table>
      <tr class="column-title">
        <th>RANK</th>
        <th>PROVIDER IP</th>
        <th>PROVIDER ADDRESS</th>
        <th class="right-text">TOTAL SPACE</th>
        <th class="right-text">FREE SPACE</th>
        <th class="right-text">BURNED CONTRACTS</th>
      </tr>
      {
        storageInfo.map((value: any, index: any) => (
          <tr>
            <td>{index + 1}</td>
            <td>
              <a href={value["ip"]} target="_blank">
                {value["ip"]}
              </a>
            </td>
            <td>{value["address"]}</td>
            <td class="right-text">{value["totalspace"]} Bytes</td>
            <td class="right-text">{value["freespace"]} Bytes</td>
            <td class="right-text">{value["burned_contracts"]}</td>
          </tr>
        ))
      }
    </table>
  </div>
<style>

</style>
